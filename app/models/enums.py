from enum import Enum


class StrEnum(str, Enum):
    """Enum base que serializa siempre como su valor de texto."""

    def __str__(self) -> str:  # pragma: no cover - comportamiento trivial
        return str(self.value)


class TipoDocumentoEnum(StrEnum):
    CERTIFICADO_INCAPACIDAD = "CERTIFICADO_INCAPACIDAD"
    EPICRISIS = "EPICRISIS"
    FURIPS = "FURIPS"
    CERTIFICADO_NACIDO_VIVO = "CERTIFICADO_NACIDO_VIVO"
    REGISTRO_CIVIL = "REGISTRO_CIVIL"
    DOCUMENTO_IDENTIDAD = "DOCUMENTO_IDENTIDAD"
    COMPROBANTE_PAGO = "COMPROBANTE_PAGO"


class EstadoSolicitudDocumentoEnum(StrEnum):
    PENDIENTE = "PENDIENTE"
    ENTREGADO = "ENTREGADO"
    VENCIDO = "VENCIDO"
    REQUIERE_CITACION = "REQUIERE_CITACION"


class EstadoIncapacidadEnum(StrEnum):
    PENDIENTE_VALIDACION = "PENDIENTE_VALIDACION"
    DOCUMENTACION_INCOMPLETA = "DOCUMENTACION_INCOMPLETA"
    DOCUMENTACION_COMPLETA = "DOCUMENTACION_COMPLETA"
    APROBADA_PENDIENTE_TRANSCRIPCION = "APROBADA_PENDIENTE_TRANSCRIPCION"
    TRANSCRITA = "TRANSCRITA"
    COBRADA = "COBRADA"
    RECHAZADA_ENTIDAD = "RECHAZADA_ENTIDAD"
    PAGADA = "PAGADA"
    RECHAZADA = "RECHAZADA"


class TipoNotificacionEnum(StrEnum):
    REGISTRO_INCAPACIDAD = "REGISTRO_INCAPACIDAD"
    DOCUMENTOS_FALTANTES = "DOCUMENTOS_FALTANTES"
    RECORDATORIO_DOCUMENTOS_DIA2 = "RECORDATORIO_DOCUMENTOS_DIA2"
    SEGUNDA_NOTIFICACION_DOCUMENTOS = "SEGUNDA_NOTIFICACION_DOCUMENTOS"
    REQUERIMIENTO_CITACION = "REQUERIMIENTO_CITACION"
    DOCUMENTACION_COMPLETADA = "DOCUMENTACION_COMPLETADA"
    APROBACION = "APROBACION"
    RECHAZO = "RECHAZO"
    CAMBIO_ESTADO = "CAMBIO_ESTADO"


class EstadoNotificacionEnum(StrEnum):
    PENDIENTE = "PENDIENTE"
    ENVIADA = "ENVIADA"
    ENTREGADA = "ENTREGADA"
    ERROR = "ERROR"


# Alias para retrocompatibilidad y conveniencia
TipoDocumento = TipoDocumentoEnum
EstadoSolicitudDocumento = EstadoSolicitudDocumentoEnum
EstadoIncapacidad = EstadoIncapacidadEnum
TipoNotificacion = TipoNotificacionEnum
EstadoNotificacion = EstadoNotificacionEnum
