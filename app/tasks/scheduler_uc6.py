"""
Scheduler de tareas peri√≥dicas para UC6 - Solicitud de Documentos Faltantes.

Este m√≥dulo implementa tareas programadas que se ejecutan autom√°ticamente
para procesar recordatorios de documentaci√≥n pendiente.
"""

import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

logger = logging.getLogger(__name__)

# Scheduler global
scheduler = None


def procesar_recordatorios_documentos():
    """
    Tarea diaria autom√°tica que procesa recordatorios de documentos pendientes.
    
    Esta funci√≥n se ejecuta todos los d√≠as a las 08:00 AM para:
    - Identificar solicitudes vencidas o pr√≥ximas a vencer
    - Enviar recordatorios con tono de urgencia apropiado
    - Actualizar campos de √∫ltima notificaci√≥n
    - Marcar solicitudes que requieren citaci√≥n
    
    Returns:
        bool: True si la ejecuci√≥n fue exitosa, False en caso de error
    """
    try:
        logger.info("üîÑ Iniciando tarea programada: procesar_recordatorios_documentos()")
        
        # Import aqu√≠ para evitar circular imports
        from app.services.solicitud_documentos_service import SolicitudDocumentosService
        
        # Ejecutar el procesamiento de recordatorios
        resultado = SolicitudDocumentosService.procesar_recordatorios()
        
        if resultado['exito']:
            logger.info(
                f"‚úÖ Tarea de recordatorios ejecutada correctamente - "
                f"Procesados: {resultado.get('total_procesados', 0)}, "
                f"Recordatorios enviados: {resultado.get('recordatorios_enviados', 0)}"
            )
            return True
        else:
            logger.warning(
                f"‚ö†Ô∏è Tarea de recordatorios completada con advertencias - "
                f"{resultado.get('mensaje', 'Sin detalles')}"
            )
            return True  # No fallar aunque haya advertencias
            
    except Exception as e:
        # En caso de error, loguear pero no fallar completamente
        # El scheduler debe continuar ejecut√°ndose
        logger.error(f"‚ùå Error en tarea programada de recordatorios: {str(e)}", exc_info=True)
        return False


def registrar_tareas_periodicas(scheduler_instance):
    """
    Registra todas las tareas peri√≥dicas de UC6 en el scheduler.
    
    Esta funci√≥n se ejecuta una vez al startup de la aplicaci√≥n y configura:
    - Tarea diaria de recordatorios a las 08:00 AM
    - Cualquier otra tarea peri√≥dica necesaria para UC6
    
    Args:
        scheduler_instance: Instancia de APScheduler (BackgroundScheduler)
    
    Returns:
        bool: True si las tareas fueron registradas exitosamente
    """
    try:
        logger.info("üìã Registrando tareas peri√≥dicas de UC6...")
        
        # Tarea diaria: Procesar recordatorios de documentos a las 08:00 AM
        scheduler_instance.add_job(
            func=procesar_recordatorios_documentos,
            trigger=CronTrigger(hour=8, minute=0),
            id='procesar_recordatorios_uc6',
            name='Procesar recordatorios de documentos UC6',
            replace_existing=True,
            misfire_grace_time=3600  # Permitir 1 hora de gracia si la app estaba apagada
        )
        
        logger.info("‚úÖ Tarea 'procesar_recordatorios_uc6' registrada para ejecutarse diariamente a las 08:00 AM")
        
        # Aqu√≠ se podr√≠an agregar m√°s tareas peri√≥dicas en el futuro:
        # - Limpieza de documentos antiguos
        # - Reportes autom√°ticos
        # - Auditor√≠as programadas
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error al registrar tareas peri√≥dicas: {str(e)}", exc_info=True)
        return False


def iniciar_scheduler(app=None):
    """
    Inicializa y arranca el scheduler de tareas peri√≥dicas.
    
    Esta funci√≥n debe ser llamada durante el startup de la aplicaci√≥n Flask.
    Crea el scheduler, registra las tareas y lo inicia en modo background.
    
    Args:
        app: Instancia de la aplicaci√≥n Flask (opcional, para logging context)
    
    Returns:
        BackgroundScheduler: Instancia del scheduler iniciado
    """
    global scheduler
    
    try:
        if scheduler is not None:
            logger.warning("‚ö†Ô∏è Scheduler ya est√° inicializado, omitiendo...")
            return scheduler
        
        logger.info("üöÄ Inicializando scheduler de tareas peri√≥dicas...")
        
        # Crear scheduler en modo background
        scheduler = BackgroundScheduler(
            timezone='America/Bogota',  # Timezone de Colombia
            daemon=True  # Daemon thread para que termine con la app
        )
        
        # Registrar todas las tareas peri√≥dicas
        if registrar_tareas_periodicas(scheduler):
            # Iniciar el scheduler
            scheduler.start()
            logger.info("‚úÖ Scheduler iniciado correctamente")
            
            # Loguear las tareas registradas
            jobs = scheduler.get_jobs()
            logger.info(f"üìä Tareas programadas activas: {len(jobs)}")
            for job in jobs:
                logger.info(f"   - {job.id}: {job.name} (pr√≥xima ejecuci√≥n: {job.next_run_time})")
        else:
            logger.error("‚ùå No se pudieron registrar las tareas peri√≥dicas")
            scheduler = None
        
        return scheduler
        
    except Exception as e:
        logger.error(f"‚ùå Error al inicializar scheduler: {str(e)}", exc_info=True)
        scheduler = None
        return None


def detener_scheduler():
    """
    Detiene el scheduler de tareas peri√≥dicas.
    
    Esta funci√≥n debe ser llamada durante el shutdown de la aplicaci√≥n
    para asegurar que todas las tareas se completen apropiadamente.
    """
    global scheduler
    
    if scheduler is not None:
        try:
            logger.info("üõë Deteniendo scheduler de tareas peri√≥dicas...")
            scheduler.shutdown(wait=True)
            scheduler = None
            logger.info("‚úÖ Scheduler detenido correctamente")
        except Exception as e:
            logger.error(f"‚ùå Error al detener scheduler: {str(e)}", exc_info=True)


def obtener_scheduler():
    """
    Obtiene la instancia global del scheduler.
    
    Returns:
        BackgroundScheduler: Instancia del scheduler o None si no est√° inicializado
    """
    return scheduler


def ejecutar_tarea_manual(nombre_tarea):
    """
    Ejecuta una tarea programada manualmente (√∫til para testing y debugging).
    
    Args:
        nombre_tarea (str): Nombre de la tarea a ejecutar ('procesar_recordatorios')
    
    Returns:
        bool: True si la tarea se ejecut√≥ correctamente
    """
    try:
        logger.info(f"üîß Ejecuci√≥n manual de tarea: {nombre_tarea}")
        
        if nombre_tarea == 'procesar_recordatorios':
            return procesar_recordatorios_documentos()
        else:
            logger.error(f"‚ùå Tarea desconocida: {nombre_tarea}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error en ejecuci√≥n manual de tarea: {str(e)}", exc_info=True)
        return False
